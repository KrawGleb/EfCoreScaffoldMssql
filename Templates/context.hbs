using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage;

namespace {{Namespace}}
{
    public interface IDatabaseContext
    {
{{#each Entities}}
        DbSet<{{EntityName}}>
    {{EntityPluralizedName}} { get; }
    {{/each}}

    {{#each StoredProcedures}}
    Task<int>
        {{Name}}({{#each Parameters}}{{#if IsOutput}}out {{/if}}{{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}});
        {{/each}}
        
        Task<int> CommitChangesAsync(bool fireTriggers = true);

        Task<AppTransaction> BeginTransactionAsync(IsolationLevel isolationLevel);
        Task CompleteTransactionAsync(IDbContextTransaction transaction, bool isSuccess);
        bool IsInTransaction { get; }

        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        Task BulkInsertAsync<T>(IList<T> entities);
        void ResetChanges();
    }

    public partial class {{ContextName}} : DbContext
    {
        {{#each Entities}}
        public virtual DbSet<{{EntityName}}> {{EntityPluralizedName}} { get; set; }
        {{/each}}

        public {{ContextName}}(DbContextOptions<{{ContextName}}> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            {{#each Entities}}
            modelBuilder.Entity<{{EntityName}}>(entity =>
            {
                {{#if HasKey}}
                {{#unless HasSimpleKey}}
                entity.HasKey(e => new { {{#each Keys}}e.{{ColumnName}}{{#unless @last}}, {{/unless}}{{/each}} });
                {{/unless}}
                {{/if}}
                {{#unless HasKey}}
                entity.HasKey(e => new { {{#each Columns}}{{#unless IsNullable}}e.{{Name}}{{#unless @last}}, {{/unless}}{{/unless}}{{/each}} });
                {{/unless}}
                {{#each ColumnsEfPropertyOrder}}
                {{#if HasModifiers}}
                entity.Property(e => e.{{Name}})                                    
                {{~ #if IsIdentity}}.ValueGeneratedOnAdd(){{/if}}
                {{~ #if IsValueGeneratedNever}}.ValueGeneratedNever(){{/if}}
                {{~ #if IsNonUnicodeString}}.IsUnicode(false){{/if}}
                {{~ #if HasDefaultDefinition}}.HasDefaultValueSql("{{DefaultDefinition}}"){{/if}}
                {{~ #if HasComputedColumnSql}}.HasComputedColumnSql("{{ComputedColumnSql}}"){{/if}};
                {{/if}}
                {{/each}}
                {{#each ForeignKeys}}
                {{#if IsOneToOne}}
                entity.HasOne(d => d.{{PropertyName}})
                    .WithOne(p => p.{{InversePropertyName}})
                {{#if IsCompositeKey}}
                    .HasForeignKey<{{InverseEntityName}}>(d => new { {{#each FkColumns}}d.{{.}}{{#unless @last}}, {{/unless}}{{/each}} })
                {{else}}
                    .HasForeignKey<{{InverseEntityName}}>(d => {{#each FkColumns}}d.{{.}}{{/each}})
                {{/if}}
                {{else}}
                entity.HasOne(d => d.{{PropertyName}})
                    .WithMany(p => p.{{InversePropertyName}})
                {{#if IsCompositeKey}}
                    .HasForeignKey(d => new { {{#each FkColumns}}d.{{.}}{{#unless @last}}, {{/unless}}{{/each}} })
                {{else}}
                    .HasForeignKey(d => {{#each FkColumns}}d.{{.}}{{/each}})
                {{/if}}
                {{/if}}
                    .HasConstraintName("{{FkName}}");
                {{/each}}
            });
            {{/each}}
        }

        //https://stackoverflow.com/questions/59624695/entity-framework-core-3-1-return-value-int-from-stored-procedure
        {{#each StoredProcedures}}
        public Task<int> {{Name}}({{#each Parameters}}{{#if IsOutput}}out {{/if}}{{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            {{#each Parameters}}
            var {{CSharpName}}Parameter = new SqlParameter("{{ParameterNameWithoutAt}}", {{#unless @IsOutput}}{{CSharpName}}{{/unless}}{{#if IsOutput}}"{{SqlType}}"{{/if}}){{#if IsOutput}}{Direction = ParameterDirection.Output}{{/if}};
            {{/each}}
            return Database.ExecuteSqlRawAsync("EXEC {{Schema}}.{{Name}} {{#each Parameters}}{{ParameterName}}{{#if IsOutput}} OUTPUT{{/if}}{{#unless @last}}, {{/unless}}{{/each}}"{{#each Parameters}}, {{CSharpName}}Parameter{{/each}});
            {{#each Parameters}}{{#if IsOutput}}
            {{CSharpName}} = ({{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}}){{CSharpName}}Parameter.Value;{{/if}}{{/each}}
        }

        {{/each}}
    }
}
